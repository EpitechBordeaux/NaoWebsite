{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "My API",
    "description": "Documentation automatically generated by the <b>swagger-autogen</b> module."
  },
  "host": "localhost:5001",
  "basePath": "/",
  "tags": [
    {
      "name": "User",
      "description": "Endpoints"
    }
  ],
  "schemes": [
    "http",
    "https"
  ],
  "securityDefinitions": {
    "api_key": {
      "type": "apiKey",
      "name": "api_key",
      "in": "header"
    },
    "petstore_auth": {
      "type": "oauth2",
      "authorizationUrl": "https://petstore.swagger.io/oauth/authorize",
      "flow": "implicit",
      "scopes": {
        "read_pets": "read your pets",
        "write_pets": "modify pets in your account"
      }
    }
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/user/signin": {
      "get": {
        "tags": [
          "User"
        ],
        "description": "Get all user already created",
        "parameters": [],
        "responses": {
          "201": {
            "schema": {
              "$ref": "#/definitions/AllUser"
            },
            "description": "User created succefully"
          },
          "404": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "No user exists"
                }
              },
              "xml": {
                "name": "main"
              }
            },
            "description": "No user exists"
          }
        }
      },
      "post": {
        "tags": [
          "User"
        ],
        "description": "Create an user",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "username": {
                  "example": "any"
                },
                "email": {
                  "example": "any"
                },
                "password": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "schema": {
              "$ref": "#/definitions/User"
            },
            "description": "User created succefully"
          },
          "409": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "User already exists"
                }
              },
              "xml": {
                "name": "main"
              }
            },
            "description": "User already exists"
          },
          "500": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "Error"
                }
              },
              "xml": {
                "name": "main"
              }
            },
            "description": "Error"
          }
        }
      }
    },
    "/user/{name}": {
      "get": {
        "tags": [
          "User"
        ],
        "description": "Get user by name",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "schema": {
              "$ref": "#/definitions/UserByName"
            },
            "description": "User created succefully"
          },
          "404": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "User does not exist"
                }
              },
              "xml": {
                "name": "main"
              }
            },
            "description": "User does not exist"
          }
        }
      }
    },
    "/login": {
      "post": {
        "tags": [
          "User"
        ],
        "description": "Get user by name",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "username": {
                  "example": "any"
                },
                "email": {
                  "example": "any"
                },
                "password": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "schema": {
              "type": "object",
              "properties": {
                "userName": {
                  "type": "string",
                  "example": "Jhon Doe"
                }
              },
              "xml": {
                "name": "main"
              }
            },
            "description": "Login Successfully"
          },
          "409": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "User does not exist"
                }
              },
              "xml": {
                "name": "main"
              }
            },
            "description": "User does not exist"
          },
          "500": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "Error"
                }
              },
              "xml": {
                "name": "main"
              }
            },
            "description": "Error"
          }
        }
      }
    },
    "/cards/groupsId/{id}": {
      "get": {
        "tags": [
          "Cards"
        ],
        "description": "Get all cards of a group",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "schema": {
              "$ref": "#/definitions/Cards"
            },
            "description": "Get all cards of a group"
          },
          "404": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "No cards found"
                }
              },
              "xml": {
                "name": "main"
              }
            },
            "description": "No cards with this groupsId exist"
          }
        }
      }
    },
    "/cards/userId": {
      "post": {
        "tags": [
          "Cards"
        ],
        "description": "Create card",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "example": "any"
                },
                "groupsId": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "type": "string",
                  "example": "Created new Card"
                }
              },
              "xml": {
                "name": "main"
              }
            },
            "description": "Created card"
          },
          "409": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "Card already exists"
                }
              },
              "xml": {
                "name": "main"
              }
            },
            "description": "Card already exist"
          },
          "500": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "Error creating card"
                }
              },
              "xml": {
                "name": "main"
              }
            },
            "description": "Error creating card"
          }
        }
      }
    },
    "/cards/delete/{name}": {
      "delete": {
        "tags": [
          "Cards"
        ],
        "description": "Delete card",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "type": "string",
                  "example": "Deleted card"
                }
              },
              "xml": {
                "name": "main"
              }
            },
            "description": "Deleted card"
          },
          "409": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "Card doesnt exists"
                }
              },
              "xml": {
                "name": "main"
              }
            },
            "description": "Card doesn't exists"
          },
          "500": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "Error deleting card"
                }
              },
              "xml": {
                "name": "main"
              }
            },
            "description": "Error deleting card"
          }
        }
      }
    },
    "/organizations/": {
      "get": {
        "tags": [
          "Organizations"
        ],
        "description": "Get all organizations",
        "parameters": [],
        "responses": {
          "201": {
            "schema": {
              "$ref": "#/definitions/Organizations"
            },
            "description": "Get all organizations"
          },
          "203": {
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "type": "string",
                  "example": "No organization exists"
                }
              },
              "xml": {
                "name": "main"
              }
            },
            "description": "No organization exists"
          }
        }
      }
    },
    "/organizations/getUser/{id}": {
      "get": {
        "tags": [
          "Organizations"
        ],
        "description": "Get all user of an organization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "schema": {
              "$ref": "#/definitions/UserOrganization"
            },
            "description": "All users of an organization"
          },
          "203": {
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "type": "string",
                  "example": "Organization dosn't contain any user"
                }
              },
              "xml": {
                "name": "main"
              }
            },
            "description": "Organization dosn't contain any user"
          },
          "404": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "Organization dosn't exist"
                }
              },
              "xml": {
                "name": "main"
              }
            },
            "description": "Organization dosn't exist"
          }
        }
      }
    },
    "/organizations/userOrganisation/{id}": {
      "get": {
        "tags": [
          "Organizations"
        ],
        "description": "Get all user of an organization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "schema": {
              "$ref": "#/definitions/OrganizationUser"
            },
            "description": "All organization of an user"
          },
          "203": {
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "type": "string",
                  "example": "User dosn't have access to any organization"
                }
              },
              "xml": {
                "name": "main"
              }
            },
            "description": "User dosn't have access to any organization"
          },
          "404": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "User dosn't exist"
                }
              },
              "xml": {
                "name": "main"
              }
            },
            "description": "User dosn't exist"
          }
        }
      }
    },
    "/organizations/{name}": {
      "get": {
        "tags": [
          "Organizations"
        ],
        "description": "Get organization by name",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "schema": {
              "$ref": "#/definitions/Organizations"
            },
            "description": "Get organization by name"
          },
          "404": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "Orga dosn't exists"
                }
              },
              "xml": {
                "name": "main"
              }
            },
            "description": "Orga dosn't exists"
          }
        }
      }
    },
    "/organizations/addOrganization": {
      "post": {
        "tags": [
          "Organizations"
        ],
        "description": "Create organization",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "organizationName": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "schema": {
              "$ref": "#/definitions/CreateOrga"
            },
            "description": "Created new Orga"
          },
          "409": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "Orga already exists"
                }
              },
              "xml": {
                "name": "main"
              }
            },
            "description": "Orga already exists"
          },
          "500": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "Error creating Orga"
                }
              },
              "xml": {
                "name": "main"
              }
            },
            "description": "Error creating Orga"
          }
        }
      }
    },
    "/organizations/addUser": {
      "post": {
        "tags": [
          "Organizations"
        ],
        "description": "Add user to an organization",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "example": "any"
                },
                "organizationId": {
                  "example": "any"
                },
                "organizationName": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "type": "string",
                  "example": "Created new User"
                }
              },
              "xml": {
                "name": "main"
              }
            },
            "description": "Created new User"
          },
          "409": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "User already exists"
                }
              },
              "xml": {
                "name": "main"
              }
            },
            "description": "User already exists"
          },
          "500": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "Error deleted User"
                }
              },
              "xml": {
                "name": "main"
              }
            },
            "description": "Error deleted User"
          }
        }
      }
    },
    "/organizations/delete/user": {
      "delete": {
        "tags": [
          "Organizations"
        ],
        "description": "Add user to an organization",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "example": "any"
                },
                "organizationId": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "type": "string",
                  "example": "Deleted User"
                }
              },
              "xml": {
                "name": "main"
              }
            },
            "description": "Deleted User"
          },
          "404": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "User dosn't exists"
                }
              },
              "xml": {
                "name": "main"
              }
            },
            "description": "User dosn't exists"
          },
          "500": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "Error deleted User"
                }
              },
              "xml": {
                "name": "main"
              }
            },
            "description": "Error deleted User"
          }
        }
      }
    },
    "/organizations/delete/{name}": {
      "delete": {
        "tags": [
          "Organizations"
        ],
        "description": "Delete organization",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "type": "string",
                  "example": "Deleted organization"
                }
              },
              "xml": {
                "name": "main"
              }
            },
            "description": "Deleted organization"
          },
          "404": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "Organization dosn't exists"
                }
              },
              "xml": {
                "name": "main"
              }
            },
            "description": "Organization dosn't exists"
          },
          "500": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "Error deleted Orga"
                }
              },
              "xml": {
                "name": "main"
              }
            },
            "description": "Error deleted Orga"
          }
        }
      }
    },
    "/groups/userId/{id}": {
      "get": {
        "tags": [
          "Groups"
        ],
        "description": "Get all groups of an organization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "schema": {
              "$ref": "#/definitions/Groups"
            },
            "description": "Get organization by name"
          },
          "203": {
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "type": "string",
                  "example": "No groups found"
                }
              },
              "xml": {
                "name": "main"
              }
            },
            "description": "No groups found"
          },
          "404": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "Organization dosn't exists"
                }
              },
              "xml": {
                "name": "main"
              }
            },
            "description": "Organization dosn't exists"
          }
        }
      }
    },
    "/groups/userId/": {
      "post": {
        "tags": [
          "Groups"
        ],
        "description": "Create group in organization",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "example": "any"
                },
                "organizationId": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "schema": {
              "$ref": "#/definitions/CreateGroup"
            },
            "description": "Created new Group"
          },
          "405": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "Group already exists"
                }
              },
              "xml": {
                "name": "main"
              }
            },
            "description": "Group already exists"
          },
          "409": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "Organization dosn't exists"
                }
              },
              "xml": {
                "name": "main"
              }
            },
            "description": "Organization dosn't exist"
          },
          "500": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "Error creating Group"
                }
              },
              "xml": {
                "name": "main"
              }
            },
            "description": "Error creating Group"
          }
        }
      }
    },
    "/groups/delete/{name}": {
      "delete": {
        "tags": [
          "Groups"
        ],
        "description": "Delete group by name",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "type": "string",
                  "example": "Deleted group"
                }
              },
              "xml": {
                "name": "main"
              }
            },
            "description": "Deleted group"
          },
          "404": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "Group dosn't exists"
                }
              },
              "xml": {
                "name": "main"
              }
            },
            "description": "Group dosn't exists"
          }
        }
      }
    }
  },
  "definitions": {
    "User": {
      "type": "object",
      "properties": {
        "userName": {
          "type": "string",
          "example": "Jhon Doe"
        },
        "userEmail": {
          "type": "string",
          "example": "JhonDoe@epitech.eu"
        }
      }
    },
    "AddUser": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "example": "Jhon Doe"
        },
        "email": {
          "type": "string",
          "example": "JhonDoe@epitech.eu"
        },
        "password": {
          "type": "string",
          "example": "password"
        }
      },
      "required": [
        "username",
        "email"
      ]
    },
    "AllUser": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number",
                "example": 1
              },
              "username": {
                "type": "string",
                "example": "Jhon Doe"
              },
              "email": {
                "type": "string",
                "example": "JhonDoe@epitech.eu"
              },
              "password": {
                "type": "string",
                "example": "password"
              }
            }
          }
        }
      },
      "required": [
        "result"
      ]
    },
    "UserByName": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number",
                "example": 1
              },
              "username": {
                "type": "string",
                "example": "Jhon Doe"
              },
              "email": {
                "type": "string",
                "example": "JhonDoe@epitech.eu"
              },
              "password": {
                "type": "string",
                "example": "password"
              }
            }
          }
        }
      },
      "required": [
        "result"
      ]
    },
    "Cards": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number",
                "example": 15
              },
              "name": {
                "type": "string",
                "example": "cat"
              },
              "groupsId": {
                "type": "number",
                "example": 13
              }
            }
          }
        }
      }
    },
    "Organizations": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number",
                "example": 36
              },
              "organizationName": {
                "type": "string",
                "example": "Epitech"
              }
            }
          }
        }
      }
    },
    "UserOrganization": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "number",
            "example": 104
          },
          "organizationId": {
            "type": "number",
            "example": 38
          },
          "organizationName": {
            "type": "string",
            "example": "Adapei"
          }
        }
      }
    },
    "OrganizationUser": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "number",
            "example": 104
          },
          "organizationId": {
            "type": "number",
            "example": 38
          },
          "organizationName": {
            "type": "string",
            "example": "Adapei"
          }
        }
      }
    },
    "Groups": {
      "type": "object",
      "properties": {
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number",
                "example": 36
              },
              "name": {
                "type": "string",
                "example": "food"
              },
              "organizationName": {
                "type": "string",
                "example": "Epitech"
              }
            }
          }
        }
      }
    },
    "CreateGroup": {
      "type": "object",
      "properties": {
        "groupeName": {
          "type": "string",
          "example": "Jean"
        },
        "organizationId": {
          "type": "number",
          "example": 18
        }
      }
    },
    "CreateOrga": {
      "type": "object",
      "properties": {
        "organizationName": {
          "type": "string",
          "example": "Epi"
        }
      }
    },
    "AddUserOrga": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "number",
          "example": 104
        },
        "organizationId": {
          "type": "number",
          "example": 19
        },
        "organizationName": {
          "type": "string",
          "example": "Epitech"
        }
      }
    }
  }
}